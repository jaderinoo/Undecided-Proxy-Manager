services:
  nginx:
    image: nginx:alpine
    ports:
      - "${PROD_NGINX_HTTP_PORT:-80}:80"
      - "${PROD_NGINX_HTTPS_PORT:-443}:443"
    environment:
      - PROD_FRONTEND_PORT=${PROD_FRONTEND_PORT:-6070}
      - PROD_BACKEND_PORT=${PROD_BACKEND_PORT:-6080}
      - PROD_NGINX_HTTP_PORT=${PROD_NGINX_HTTP_PORT:-80}
      - PROD_NGINX_HTTPS_PORT=${PROD_NGINX_HTTPS_PORT:-443}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - nginx_data:/var/lib/nginx
    command: >
      sh -c "
        envsubst '$$PROD_FRONTEND_PORT $$PROD_BACKEND_PORT' < /etc/nginx/sites-available/upm-admin.conf.template > /etc/nginx/sites-enabled/upm-admin.conf &&
        nginx -g 'daemon off;'
      "
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - upm-network

  backend:
    env_file: .env
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${PROD_BACKEND_PORT:-6080}:6080"
    environment:
      - GO_ENV=production
      - BACKEND_PORT=${PROD_BACKEND_PORT:-6080}
      - DB_PATH=/data/upm.db
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - NGINX_CONFIG_PATH=/etc/nginx/sites-available
      - NGINX_RELOAD_CMD=docker exec nginx nginx -s reload
      - NGINX_CONTAINER_NAME=nginx
    volumes:
      - sqlite_data:/data
      - ./nginx/sites-available:/etc/nginx/sites-available
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - upm-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${PROD_FRONTEND_PORT:-6070}:6070"
    environment:
      - VITE_API_URL=/api
      - PROD_FRONTEND_PORT=${PROD_FRONTEND_PORT:-6070}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - upm-network

  db:
    image: alpine:latest
    command: sh -c "mkdir -p /data && touch /data/upm.db && tail -f /dev/null"
    volumes:
      - sqlite_data:/data
    restart: unless-stopped

volumes:
  sqlite_data:
  nginx_data:

networks:
  upm-network:
    driver: bridge
